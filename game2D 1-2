package main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyListener;
import javax.swing.JPanel;




public class GamePanel extends JPanel implements Runnable{

	final int originalTitleSize = 10;
	final int scale = 3;
	
	final int tileSize = originalTitleSize * scale;
	final int maxScreenCol = 16;
	final int maxScreenRow = 12;
	final int screenWidth = tileSize * maxScreenCol;
	final int screenHeight = tileSize * maxScreenRow;
	
	int FPS = 60;
	KeyHendler keyH = new KeyHendler();
	Thread gameThread;
	
	int playerX = 100;
	int playerY = 100;
	int playerSpeed = 4;
	
	
	public GamePanel() {
		
		this.setPreferredSize(new Dimension(screenWidth, screenHeight));
		this.setBackground(Color.black);
		this.setDoubleBuffered(true);
		this.addKeyListener(keyH);
		this.setFocusable(true);
		
		
	}
	
	
	public void startGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}


	@Override
	public void run() {
		double drawInterval = 1000000000/FPS;
		double nextDrawTime = System.nanoTime() + drawInterval;
		while(gameThread != null) {
			update();
			
			repaint();
			
			
			try {
			double remainingTime = nextDrawTime - System.nanoTime();
			remainingTime = remainingTime/1000000;
			
			if(remainingTime <0 ) {
				remainingTime = 0;
			}
				
			Thread.sleep((long) remainingTime);
			 nextDrawTime += drawInterval;
			}catch(InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
		public void update() {
			if(keyH.upPressed == true) {
				playerY -= playerSpeed;
			}else if(keyH.downPressed) {
				playerY += playerSpeed;
			}else if(keyH.rightPressed) {
				playerX += playerSpeed;
			}else if(keyH.leftPressed) {
				playerX -= playerSpeed;
			}
			
		
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		Graphics2D g2 = (Graphics2D)g;
		
		g2.setColor(Color.white);
		
		g2.fillRect(playerX, playerY, tileSize, tileSize);
		
		g2.dispose();
	}
}


package main;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class KeyHendler implements KeyListener{

	public boolean upPressed,downPressed,leftPressed,rightPressed;
	
	@Override
	public void keyTyped(KeyEvent e) {

		
	}

	@Override
	public void keyPressed(KeyEvent e) {
			int code = e.getKeyCode();
		if(code == KeyEvent.VK_W) {
			upPressed = true;
		}
		if(code == KeyEvent.VK_S) {
			downPressed = true;
		}
		if(code == KeyEvent.VK_A) {
			leftPressed = true;
		}
		if(code == KeyEvent.VK_D) {
			rightPressed = true;
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {

		int code = e.getKeyCode();
		if(code == KeyEvent.VK_W) {
			upPressed = false;
		}
		if(code == KeyEvent.VK_S) {
			downPressed = false;
		}
		if(code == KeyEvent.VK_A) {
			leftPressed = false;
		}
		if(code == KeyEvent.VK_D) {
			rightPressed = false;
		}
	}
	
	

}


package main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyListener;
import javax.swing.JPanel;




public class GamePanel extends JPanel implements Runnable{

	final int originalTitleSize = 10;
	final int scale = 3;
	
	final int tileSize = originalTitleSize * scale;
	final int maxScreenCol = 16;
	final int maxScreenRow = 12;
	final int screenWidth = tileSize * maxScreenCol;
	final int screenHeight = tileSize * maxScreenRow;
	
	int FPS = 60;
	KeyHendler keyH = new KeyHendler();
	Thread gameThread;
	
	int playerX = 100;
	int playerY = 100;
	int playerSpeed = 4;
	
	
	public GamePanel() {
		
		this.setPreferredSize(new Dimension(screenWidth, screenHeight));
		this.setBackground(Color.black);
		this.setDoubleBuffered(true);
		this.addKeyListener(keyH);
		this.setFocusable(true);
		
		
	}
	
	
	public void startGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}


	@Override
	public void run() {
		double drawInterval = 1000000000/FPS;
		double nextDrawTime = System.nanoTime() + drawInterval;
		while(gameThread != null) {
			update();
			
			repaint();
			
			
			try {
			double remainingTime = nextDrawTime - System.nanoTime();
			remainingTime = remainingTime/1000000;
			
			if(remainingTime <0 ) {
				remainingTime = 0;
			}
				
			Thread.sleep((long) remainingTime);
			 nextDrawTime += drawInterval;
			}catch(InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
		public void update() {
			if(keyH.upPressed == true) {
				playerY -= playerSpeed;
			}else if(keyH.downPressed) {
				playerY += playerSpeed;
			}else if(keyH.rightPressed) {
				playerX += playerSpeed;
			}else if(keyH.leftPressed) {
				playerX -= playerSpeed;
			}
			
		
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		Graphics2D g2 = (Graphics2D)g;
		
		g2.setColor(Color.white);
		
		g2.fillRect(playerX, playerY, tileSize, tileSize);
		
		g2.dispose();
	}
}
